Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Звіт
до практичного завдання №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду на Go»







Виконав:
ст. гр. ПЗПІ-23-9
Пархоменко Олександр Андрійович
                     Перевірив:
                     ст. викладач кафедри ПІ
                     Сокорчук Ігор Петрович	





Харків 2025
1 ІСТОРІЯ ЗМІН
№ДатаВерсія звіту Опис змін та виправлень130.10.20251Початкова версія документу, заповнення всіх розділів


2 ЗАВДАННЯ
     Студент повинен обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.


3 ОПИС ВИКОНАНОЇ РОБОТИ
     3.1 Вступ 
     Для доповіді було вибрано мову програмування Go. Це високорівнева, статично типізована та компільована мова, яка була розроблена компанією Google та представлена у 2009 році. Вона використовується у серверному програмуванні, розробці хмарних сервісів, машинному навчанні та для обробки даних великих обсягів [1]. Розробники цієї мови відомі своєю ворожістю до C++, де вони спростили синтаксис відносно інших «складних» мов.
     Для розробки якісних програм майже у будь-якому напрямку конкретної мови потрібно дотримуватись конкретних правил щодо назви змінних, функцій, коментарів тощо. Це потрібно для декількох речей, зокрема: робота в команді, уникнення «коду-спагеті»(заплутаний код, який складно зрозуміти, тестувати, перероблювати або доповнювати), більш продуктивний код.
     У цій доповіді будуть розглянуті правила оформлення коду на мові Go, включаючи стандарти форматування, конвенції іменування, використання коментарів, структурування проєкту та дотримання стилю кодування. Для демонстрації будуть приведені приклади добре та погано оформленого коду.
     3.2 Умови кодування
     3.2.1 Уникайте повторів у назвах функцій і методів
     Не дублюйте у назві функції назву пакета, тип отримувача або параметри. Назва має бути короткою, але зрозумілою у контексті виклику [3].
1 // Поганий приклад
2 package yamlconfig
3 
4 func ParseYAMLConfig(input string) (*Config, error)
5 
6 // Гарний приклад
7 package yamlconfig
8 
9 func Parse(input string) (*Config, error)
     3.2.2 Використовуйте іменники для функцій, що повертають значення, і дієслова для тих, що виконують дію
     Функції, які повертають дані, не повинні починатися з Get. Для схожих функцій, що працюють з різними типами, додавайте тип у кінці назви [2].
1 // Поганий приклад
2 func (c *Config) GetJobName(key string) (value string, ok bool)
3 
4 // Гарний приклад
5 func (c *Config) JobName(key string) (value string, ok bool)

     3.2.3 Використовуйте стиль MixedCaps для назв констант та надавайте їм змістовні назви
     Константи повинні пояснювати своє призначення, а не відображати конкретне значення. Не використовуйте префікси k або запис великими літерами, як у C-подібних мовах. Назва має показувати роль константи у програмі [3].
1 // Поганий приклад
2 const MAX_PACKET_SIZE = 512
3 const kMaxBufferSize = 1024
4 
5 // Гарний приклад
6 const MaxPacketSize = 512
7 const MaxBufferSize = 1024

     3.2.4 Дотримуйтеся правильного написання абревіатур та ініціалізмів у назвах
     У Go абревіатури мають писатися повністю великими або повністю малими літерами – не змішуйте регістр у межах одного слова [3]. Наприклад, URL або url, але не Url. Для декількох абревіатур у назві кожна з них пишеться послідовно (наприклад, XMLAPI, xmlAPI).
1 // Поганий приклад
2 func GetUrlInfo(id int) {}
3 
4 // Гарний приклад
5 func GetURLInfo(id int) {}

     3.2.5 Використовуйте структуровані значення помилок замість перевірки рядків
     Якщо потрібно розрізняти різні типи помилок, створюйте глобальні змінні або спеціальні типи помилок, щоб перевіряти їх через == або errors.Is() [2]. Не використовуйте пошук рядків у повідомленні помилки – це ненадійно і нечитабельно.
1 // Поганий приклад
2 if strings.Contains(err.Error(), "duplicate") { ... }
3 
4 // Гарний приклад
5 if errors.Is(err, ErrDuplicate) { ... }

     3.2.6 Пишіть код, який легко супроводжувати і змінювати
     Код має бути зрозумілим і передбачуваним для майбутніх розробників. Уникайте прихованих деталей, неочевидних скорочень і критичних дрібниць, які важко помітити [4]. Краще зробити код більш явним і коментованим, навіть якщо це збільшує кількість рядків.
1 // Поганий приклад
2 if user, err = db.UserByID(userID); err != nil {
3     // ...
4 }
5 
6 // Гарний приклад
7 u, err := db.UserByID(userID)
8 if err != nil {
9     return fmt.Errorf("invalid origin user: %s", err)
10 }
11 user = u
     
     3.2.7 Форматуйте коментарі так, щоб їх було зручно читати навіть на вузьких екранах
     Краще розбивати довгі коментарі на кілька рядків по 60–80 символів. Це покращує читабельність у редакторах і терміналах. Уникайте довгих, нерівних рядків, які погано відображаються при перегляді коду [5]. 
1 // Поганий приклад
2 // This is a comment paragraph. The length of individual lines doesn't matter in Godoc;
3 // but the choice of wrapping causes jagged lines on narrow screens or in code review.
4 
5 // Гарний приклад
6 // This is a comment paragraph.
7 // Wrapping comments improves readability
8 // on narrow screens and in code reviews.

     3.2.8 Використовуйте тип error для позначення можливих збоїв у виконанні функції
     У Go значення error завжди має бути останнім параметром, що повертається [3]. Повернення nil означає успішне виконання. Не використовуйте конкретні типи помилок (наприклад, *os.PathError) – це може призвести до неочевидних помилок при приведенні типів. 
1 // Поганий приклад
2 func Bad() *os.PathError {
3     // ...
4 }
5 
6 // Гарний приклад
7 func GoodLookup() (*Result, error) {
8     if err != nil {
9         return nil, err
10     }
11     return res, nil
12 }

     3.2.9 Заздалегідь задавайте ємність контейнерів (map, slice) під час створення
     Вказування початкової ємності дозволяє Go одразу виділити потрібний обсяг пам’яті, що зменшує кількість подальших перевиділень і прискорює роботу [2]. Для map це лише підказка компілятору, а для slice – реальне резервування пам’яті. 
1 // Поганий приклад
2 m := make(map[string]os.DirEntry)
3 
4 // Гарний приклад
5 files, _ := os.ReadDir("./files")
6 m := make(map[string]os.DirEntry, len(files))
     3.2.10 Уникайте багаторазового перетворення одного й того самого рядка у байтовий масив
     Кожне виконання []byte("string") створює новий масив, що призводить до зайвих алокацій і зниження продуктивності. Якщо рядок незмінний, виконайте конвертацію один раз і використовуйте готовий байтовий зріз [3]. 
1 // Поганий приклад
2 for i := 0; i < b.N; i++ {
3     w.Write([]byte("Hello world"))
4 }
5 
6 // Гарний приклад
7 data := []byte("Hello world")
8 for i := 0; i < b.N; i++ {
9     w.Write(data)
10 }
     
     3.2.11 Зменшуйте вкладеність коду, використовуючи раннє повернення або continue. 
     Щоб покращити читабельність, обробляйте помилки й особливі випадки на початку блоку, а основну логіку залишайте на верхньому рівні без зайвих вкладень [5]. Це робить код простішим і зрозумілішим.
1 // Поганий приклад
2 for _, v := range data {
3     if v.F1 == 1 {
4         v = process(v)
5         if err := v.Call(); err == nil {
6             v.Send()
7         } else {
8             return err
9         }
10     } else {
11         log.Printf("Invalid v: %v", v)
12     }
13 }
14 
15 // Гарний приклад
16 for _, v := range data {
17     if v.F1 != 1 {
18         log.Printf("Invalid v: %v", v)
19         continue
20     }
21 
22     v = process(v)
23     if err := v.Call(); err != nil {
24         return err
25     }
26     v.Send()
27 }
     
     3.2.12 Додавайте префікс _ до неекспортованих глобальних змінних і констант.
     Глобальні змінні й константи у Go мають область видимості всередині всього пакета [5]. Префікс _ допомагає уникнути випадкових конфліктів з локальними змінними, роблячи глобальні символи більш впізнаваними. 
1 // Поганий приклад
2 const (
3     defaultPort = 8080
4     defaultUser = "user"
5 )
6 
7 // Гарний приклад
8 const (
9     _defaultPort = 8080
10     _defaultUser = "user"
11 )
     
     3.2.13 Використовуйте коротке оголошення :=, коли змінна одразу отримує значення
     Конструкція := робить код коротшим і наочнішим. Проте у випадках, коли потрібно створити порожній зріз або показати, що значення встановлюється за замовчуванням, краще застосовувати var [5]. 
1 // Поганий приклад
2 func f(list []int) {
3     filtered := []int{}
4     for _, v := range list {
5         if v > 10 {
6             filtered = append(filtered, v)
7         }
8     }
9 }
10 
11 // Гарний приклад
12 func f(list []int) {
13     var filtered []int
14     for _, v := range list {
15         if v > 10 {
16             filtered = append(filtered, v)
17         }
18     }
19 }
     
     3.2.14 Використовуйте патерн Functional Options для передачі необов’язкових параметрів у конструктори чи публічні функції.
     Коли функція має три або більше параметрів, варто застосовувати патерн функціональних опцій. Це дозволяє розширювати API без зміни сигнатур, підвищує гнучкість і зручність використання [5]. 
1 // Поганий приклад
2 func Open(addr string, cache bool, logger *zap.Logger) (*Connection, error) {
3     // ...
4 }
5 
6 // Гарний приклад
7 func Open(addr string, opts ...Option) (*Connection, error) {
8     options := options{
9         cache:  defaultCache,
10         logger: zap.NewNop(),
11     }
12 
13     for _, o := range opts {
14         o.apply(&options)
15     }
16 
17     // ...
18     return &Connection{}, nil
19 }


4 ВИСНОВКИ
     У ході виконання роботи було розглянуто основні рекомендації зі стилю програмування на мові Go, визначені офіційними гайдлайнами Google та Uber. Ці правила охоплюють ключові аспекти написання якісного, структурованого та підтримуваного коду, від іменування функцій, змінних і констант до форматування коментарів, організації помилок і застосування шаблонів проєктування.
     Отримано навички аналізу стилістичних вимог до коду, оформлення програмних прикладів відповідно до стандартів Go, а також практичне розуміння принципів підтримуваності, читабельності та ефективності програмного забезпечення.
     У результаті виконання роботи сформовано цілісне уявлення про важливість дотримання єдиного стилю кодування в командній розробці, що сприяє підвищенню продуктивності, зменшенню кількості помилок і полегшенню подальшої модернізації програмного продукту.


5 ВИКОРИСТАНІ ДЖЕРЕЛА
     1. Effective Go - The Go Programming Language. The Go Programming Language. URL: https://go.dev/doc/effective_go (дата звернення: 31.10.2025).
     2. Go - Best practices. styleguide. URL: https://google.github.io/styleguide/go/best-practices (дата звернення: 31.10.2025).
     3. Go - Decisions. styleguide. URL: https://google.github.io/styleguide/go/decisions (дата звернення: 31.10.2025).
     4. Go - Guide. styleguide. URL: https://google.github.io/styleguide/go/guide (дата звернення: 31.10.2025).
     5. Weng A. Guide/style.md at master · uber-go/guide. GitHub. URL: https://github.com/uber-go/guide/blob/master/style.md#functional-options (дата звернення: 31.10.2025).


	ДОДАТОК А
     А.1 Відеозапис
	Відеозапис доповіді: https://youtu.be/UAZ2o2fHfLM.
	Хронологічний опис відео:
     00:00 - Назва теми доповіді 
     00:13 - Вступна частина
     01:25 - Рекомендація 1: Уникайте повторів у назвах функцій
     01:58 - Рекомендація 2: Іменники для функцій, що повертають значення
     02:18 - Рекомендація 3: Стиль MixedCaps для констант
     02:58 - Рекомендація 4: Правильне написання абревіатур
     03:25 - Рекомендація 5: Структуровані помилки
     03:52 - Рекомендація 6: Легкість супроводу коду
     04:17 - Рекомендація 7: Форматування коментарів
     04:42 - Рекомендація 8: Повернення помилок
     05:11 - Рекомендація 9: Ємність контейнерів
     05:35 - Рекомендація 10: Уникайте повторних перетворень рядків
     05:57 - Рекомендація 11: Зменшення вкладеності
     06:20 - Рекомендація 12: Префікс для неекспортованих глобальних змінних
     06:41 - Рекомендація 13: Корокте оголошення змінних
     07:07 - Рекомендація 14: Патерн Functional Options
     07:33 - Висновок
     08:19 – Джерела

ДОДАТОК Б
	Б.1 Слайди презентації

Рисунок Б.1 – Титульний слайд


Рисунок Б.2 – Вступ

Рисунок Б.3 – Рекомендація 1. Уникайте повторів у назвах функцій і методів

 
Рисунок Б.4 – Рекомендація 2. Іменники для функцій, що повертають значення

Рисунок Б.5 – Рекомендація 3. Стиль MixedCaps для констант


Рисунок Б.6 – Рекомендація 4. Правильне написання абревіатур

Рисунок Б.7 – Рекомендація 5. Структуровані помилки


Рисунок Б.8 – Рекомендація 6. Легкість супроводу коду



Рисунок Б.9 – Рекомендація 7. Форматування коментарів


Рисунок Б.10 – Рекомендація 8. Повернення помилок



Рисунок Б.11 – Рекомендація 9. Ємність контейнерів


Рисунок Б.12 – Рекомендація 10. Уникайте повторних перетворень рядків



Рисунок Б.13 – Рекомендація 11. Зменшення вкладеності


Рисунок Б.14 – Рекомендація 12. Префікс для неекспортованих глобальних



Рисунок Б.15 – Рекомендація 13. Коротке оголошення змінних


Рисунок Б.16 – Рекомендація 14. Патерн Functional Options



Рисунок Б.17 – Висновок


Рисунок Б.18 – Список використаних джерел


ДОДАТОК В
     В.1 Програмний код
     Посилання на файл в репозиторії: https://github.com/NureParkhomenkoOleksandr/ark-pzpi-23-9-parkhomenko-oleksandr/blob/main/Pract1/pzpi-23-9-parkhomenko-oleksandr-pract1/code-conventions.go
     
2


